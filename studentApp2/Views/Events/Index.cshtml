@using studentApp2.Models
@model studentApp2.Models.Event
@section head
{

    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.11/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.6/css/all.css">
    <link rel="stylesheet" href="~/libs/fullcalendar/calendar.core.main.css">
    <link rel="stylesheet" href="~/libs/fullcalendar/calendar.daygrid.main.css">
    <link rel="stylesheet" href="~/libs/fullcalendar/simple-sidebar.css">
    <link rel="stylesheet" href="~/libs/fullcalendar/mdtimepicker.css">
    <link rel="stylesheet" href="~/libs/fullcalendar/duDatepicker.css">


    <script src='~/libs/fullcalendar/calendar.core.main.js'></script>
    <script src='~/libs/fullcalendar/calendar.daygrid.main.js'></script>
    <script src='~/libs/fullcalendar/calendar.bootstrap.main.js'></script>
    <script src='~/libs/fullcalendar/calendar.interaction.main.js'></script>
    <script src='~/libs/fullcalendar/mdtimepicker.js'></script>
    <script src='~/libs/fullcalendar/duDatepicker.js'></script>

}


<br />
<div id="alert-course" class="alert alert-danger d-none" role="alert">
    <strong>Select</strong> a course and a group
    <button id="button-alert" type="button" class="close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>

<div class="d-flex" id="wrapper">
    <div id="page-content-wrapper" class="col-12">
        @if (ViewBag.TeacherCourses != null)
        {
            <br />
            <div class="form-inline">
                <div class="form-group col-md-4">
                    @Html.Label("Course ", htmlAttributes: new { @class = "control-label col-md-3", @for = "CourseSelect", id = "label-course" })
                    @Html.DropDownList("CourseSelect", (SelectList)ViewBag.TeacherCourses, "Select Course", new { @class = "form-control input-lg", id = "select-course" })
                </div>
                <div class="form-group col-md-4">
                    <label id ="label-group" class="control-label col-md-3 d-none" for="select-group">Group </label>
                    <select name="GroupSelect" id="select-group" class="form-control input-lg d-none"></select>

                </div>
            </div>
        }
        <div id='calendar'></div>
    </div>


    <div id="sidebar-wrapper" class="bg-light border-right col-7">
        <div class="list-group list-group-flush">
            <h2 id="sidebar-title"></h2>
            <a href="#" class="list-group-item list-group-item-action bg-light" id="sidebar-teacher"></a>
            <a href="#" class="list-group-item list-group-item-action bg-light" id="sidebar-course"></a>
            <a href="#" class="list-group-item list-group-item-action bg-light" id="sidebar-type"></a>
            <a href="#" class="list-group-item list-group-item-action bg-light" id="sidebar-date"></a>
            <a href="#" class="list-group-item list-group-item-action bg-light" id="sidebar-time"></a>
            <a href="#" class="list-group-item list-group-item-action bg-light" id="sidebar-description"></a>
        </div>
    </div>
</div>


<div id="modal" class="modal fade bd-example-modal-lg">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            @using (@Html.BeginForm("Index", "Events", FormMethod.Post, new { id = "modal-event-form" }))
            {
                <fieldset id="modal-fieldset">
                    <div class="form-horizontal">
                        <h4 class="modal-header">Event</h4>
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <input type="hidden" id="modal-event-id" />
                        <div class="form-group">
                            @Html.Label("Event Title", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.EventTitle, new { htmlAttributes = new { @class = "form-control", id = "modal-event-title" } })
                                @Html.ValidationMessageFor(model => model.EventTitle, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.Label("Event Type", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("EventType",
                                                        new SelectList(Enum.GetValues(typeof(EventType))),
                                                        new { @class = "form-control", id = "modal-event-type" })
                                @Html.ValidationMessageFor(model => model.EventType, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Event Date", htmlAttributes: new { @class = "control-label col-md-2  d-none", id = "modal-label-datepicker" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.EventDate, new { htmlAttributes = new { id = "datepicker", @class = "form-control d-none", } })
                                @Html.ValidationMessageFor(model => model.EventDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Event Time", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.EventDate, new { htmlAttributes = new { id = "timepicker", @class = "form-control", } })
                                @Html.ValidationMessageFor(model => model.EventDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.Label("Event Description", htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-10">
                                <textarea id="modal-event-description" name="EventDescription" class="form-control" rows="3"></textarea>
                                @Html.ValidationMessageFor(model => model.EventDescription, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </fieldset>
                <div class="modal-footer">
                    <button id="modal-button-delete" type="button" class="btn btn-danger d-none">Delete</button>
                    <button id="modal-button-create" type="button" class="btn btn-primary d-none">Create</button>
                    <button id="modal-button-save" type="button" class="btn btn-primary d-none">Save changes</button>
                    <button id="modal-button-edit" type="button" class="btn btn-primary d-none">Edit</button>
                    <button id="modal-button-close" type="button" class="btn btn-outline-danger" data-dismiss="modal">Close</button>
                </div>
            }
        </div>
    </div>
</div>


@section Scripts {

    <script>
        var teacher = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.TeacherCourses));
        document.addEventListener("DOMContentLoaded", ready);
        function ready() {
            $('#select-course').prop('selectedIndex', 0);
        }
        var calendar = createCalendar(null);

        if (teacher != undefined) {

            function getTeacherUsername() {
                return @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(HttpContext.Current.User.Identity.Name));
            }

            $('#select-course').on('change', function () {
                getGroupList(this.value)
            });

            $('#select-group').on('change', function () {
                getEventList(this.value)
            });

            $('#button-alert').on('click', function () {
                $('#alert-course').addClass('d-none');
            });

            $(document).ready(function () {
                $('#timepicker').mdtimepicker();
            });

            $(document).ready(function () {
                $('#datepicker').duDatepicker({
                    format: 'dd/mm/yyyy',
                    outFormat: 'dd/mm/yyyy',
                    auto : true
                    }); 
            });

            function getGroupList(courseId) {
                $.ajax({
                    type: "GET",
                    url: 'getGroupList/'+courseId,
                    dataType: "json",
                    error: function (xhr, status, error) {
                        console.log(error);
                    },
                    success: function (response) {
                        groups = response;
                        var options = '<option>Select group</option>';
                        for (var i = 0, len = groups.length; i < len; i++) {
                            options += '<option value= "' + groups[i].GroupID + '">' + groups[i].GroupName + '</option>';
                        }
                        $('#select-group').html(options);
                        if (groups.length > 0) {
                            $('#label-group').removeClass('d-none')
                            $('#select-group').removeClass('d-none')
                        } else {
                            $('#label-group').addClass('d-none')
                            $('#select-group').addClass('d-none')
                        }
                        createCalendar(null);
                    }
                });
            }

            function getEventList(groupId) {
                $.ajax({
                    type: "GET",
                    url: "getEventList/" + groupId,
                    dataType: "json",
                    error: function (xhr, status, error) {
                        console.log(error);
                    },
                    success: function (response) {
                        events = response;
                        formatEvents(events);
                        calendar = createCalendar(events);
                    }
                });
            }

            function createEvent(path, data) {
                $.ajax({
                    type: "POST",
                    url: path,
                    data: data,
                    dataType: "json",
                    error: function (xhr, status, error) {
                        console.log(error);
                    },
                    success: function (response) {
                        event = formatEvents(response);
                        calendar.addEvent(event[0]);
                        $('#modal-button-close').click();
                    }
                });
            }

            function editEvent(path, data) {
                $.ajax({
                    type: "POST",
                    url: path,
                    data: data,
                    dataType: "json",
                    error: function (xhr, status, error) {
                        console.log(error);
                    },
                    success: function (response) {
                        let event = calendar.getEventById(response.id);
                        let dbEvent = response;
                        event.setExtendedProp('eventTitle', dbEvent.title);
                        event.setExtendedProp('type', dbEvent.type);
                        event.setDates(dbEvent.start, null, false);
                        event.setExtendedProp('description', dbEvent.description);
                        dbEvent = formatEvents(response);
                        event.setProp('color', dbEvent[0].color);
                        event.setProp('title', dbEvent[0].title);
                        $('#modal-button-close').click();
                    }
                });
            }

            function deleteEvent(path) {
                $.ajax({
                    type: "POST",
                    url: path,
                    dataType: "json",
                    error: function (xhr, status, error) {
                        console.log(error);
                    },
                    success: function (response) {
                        let event = calendar.getEventById(response.id);
                        event.remove();
                        $('#modal-button-close').click();
                    }
                });
            }

            $('#modal-button-create').on('click', function () {
                event = {
                    EventTitle: $('#modal-event-title').val(),
                    EventType: $('#modal-event-type').val(),
                    EventDate: $('#timepicker').attr("date") + " " + $('#timepicker').val(),
                    EventDescription: $('#modal-event-description').val(),
                    EventGroup: $('#select-group').val(),
                    EventCourse: $('#select-course').val()
                }
                createEvent('Create', event);
            });

            $('#modal-button-save').on('click', function () {
                let date = $('#datepicker').val().split('/')[1] + '/' +
                    $('#datepicker').val().split('/')[0] + '/' +
                    $('#datepicker').val().split('/')[2];
                event = {
                    EventID: $('#modal-event-id').val(),
                    EventTitle: $('#modal-event-title').val(),
                    EventType: $('#modal-event-type').val(),
                    EventDate: date + " " + $('#timepicker').val(),
                    EventDescription: $('#modal-event-description').val()
                }
                editEvent('Edit', event);
            });

            $('#modal-button-delete').on('click', function () {
                let id = $('#modal-event-id').val();
                deleteEvent('Delete/'+id);
            });

            $('#modal-button-edit').on('click', function () {
                $('#modal-fieldset').attr('disabled', false);
                $('#modal-button-edit').addClass('d-none');
                $('#modal-button-delete').removeClass('d-none');
                $('#modal-button-save').removeClass('d-none');
                $('#datepicker').removeClass('d-none');
                $('#datepicker').attr('readonly', false);
                $('#modal-label-datepicker').removeClass('d-none');
            });
         }
        else {
            var sidebar_open = false;
            let events = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.StudentEvents));
            events = formatEvents(events);
            calendar = createCalendar(events);
            $(document).mouseup(function (e) {
                var container = $('#sidebar-wrapper');
                if (!container.is(e.target) && container.has(e.target).length === 0 && sidebar_open == true) {
                    container.toggleClass("toggled");
                    $('#page-content-wrapper').toggleClass("toggled");
                    $('#sidebar-overlay').remove();
                    sidebar_open = false;
                }
            });
        }

        function formatEvents(event) {
            let events = !Array.isArray(event) ? [event] : event;
            for (i = 0; i < events.length; i++) {
                let initial = '';
                events[i].eventTitle = events[i].title;
                events[i].courseName.split(' ')
                    .forEach(word => {
                    initial += word[0];
                })
                events[i].title = initial + ' ' + events[i].type;
                events[i].color = events[i].type == 'Exam' ? '#ff9800' :
                    (events[i].type == 'Project' ? '#007bff' :
                        (events[i].type == 'Assignment' ? '#28a745' : ' '));
            }
            return events;
        }

        function modalInit(event) {
            $('#modal-event-id').val(event.id);
            $('#modal-event-title').val(event.title);
            $('#modal-event-type').val(event.type);
            $('#timepicker').val(event.time);
            $('#datepicker').val(event.date);
            $('#modal-event-description').val(event.description);
            $('#modal-fieldset').attr('disabled', true);
            $('#modal-button-create').addClass('d-none');
            $('#modal-button-save').addClass('d-none');
            $('#datepicker').addClass('d-none');
            $('#modal-label-datepicker').addClass('d-none');
            if (event.teacherUsername == getTeacherUsername()) {

                $('#modal-button-edit').removeClass('d-none');
                $('#modal-button-delete').removeClass('d-none');
            } else {
                $('#modal-button-edit').addClass('d-none');
                $('#modal-button-delete').addClass('d-none');
            }
            $('#modal').modal();
        }

        function sidebarInit(event) {
            sidebar_open = true;
            fade = document.createElement('div');
            $(fade).addClass('modal-backdrop fade show')
                .attr('tabindex', 0).css("background", "rgba(0,0,0,0.7) !important")
                .css("overflow", "hidden")
                .attr('id', 'sidebar-overlay')
                .appendTo($('body'));
            $("#sidebar-wrapper,#page-content-wrapper").toggleClass("toggled");
            $("#sidebar-title").text(event.title)
            $("#sidebar-teacher").text("Initiated by: " + event.teacher)
            $("#sidebar-course").text("Course: " + event.course)
            $("#sidebar-type").text("Event Type: " + event.type)
            $("#sidebar-date").text("Date: " + event.date)
            $("#sidebar-time").text("Time: " + event.time)
            $("#sidebar-description").text("Description: " + event.description)
        }

        function createCalendar(events) {
                $('#calendar').empty();
                var calendarEl = document.getElementById('calendar');
                var calendar = new FullCalendar.Calendar(calendarEl, {
                    plugins: ['interaction', 'dayGrid', 'bootstrap'],
                    themeSystem: 'bootstrap',
                    defaultView: 'dayGridMonth',
                    selectable: true,
                    eventClick: function (info) {
                        let month = ((info.event.start.getMonth() + 1) < 10) ? "0" : "";
                        month += info.event.start.getMonth() + 1;
                        let day = ((info.event.start.getDate()) < 10) ? "0" : "";
                        day += info.event.start.getDate();
                        let event = {
                            id: info.event.id,
                            title: info.event.extendedProps.eventTitle,
                            type: info.event.extendedProps.type,
                            teacher: info.event.extendedProps.teacherName,
                            course: info.event.extendedProps.courseName,
                            date: day + "/" +
                                   month + "/" +
                                    info.event.start.getFullYear(),
                            time: info.event.start.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true }),
                            description: info.event.extendedProps.description,
                            teacherUsername: info.event.extendedProps.teacherUsername,
                        }
                        if (teacher != undefined) {
                            modalInit(event)
                        } else {
                            sidebarInit(event);
                        }
                    },
                    dateClick: function (info) {
                        if (teacher != undefined)
                            if ($('#select-course').val() != '' && $('#select-group').val() != 'Select group') {
                                $('#alert-course').addClass('d-none');
                                document.getElementById("modal-event-form").reset()
                                $('#timepicker').val('');
                                $('#modal-button-edit').addClass('d-none');
                                $('#modal-button-save').addClass('d-none');
                                $('#modal-button-delete').addClass('d-none');
                                $('#datepicker').addClass('d-none');
                                $('#modal-label-datepicker').addClass('d-none');
                                $('#modal-button-create').removeClass('d-none');
                                $('#modal-fieldset').attr('disabled', false);
                                $('#modal').modal();
                                let date = info.dateStr.split("-");
                                $('#timepicker').attr("date", date[1] + "/" + date[2] + "/" + date[0]);
                            }
                            else
                            $('#alert-course').removeClass('d-none')
                        },
                    events:events,
                    displayEventTime: false
                });
                calendar.render();
                return calendar;
        }
    </script>
}

